print("Starting 2B Cross Product Model - DEV Version")

# Get parameters from ADF
dbutils.widgets.text("adf_input_survid", "DEV-SURVID-123")
dbutils.widgets.text("adf_input_batchid", "DEV-BATCH-456") 
dbutils.widgets.text("adf_input_ds_runid", "DEV-DSRUNID-789")

input_survid = dbutils.widgets.get("adf_input_survid")
input_batchid = dbutils.widgets.get("adf_input_batchid")
input_ds_runid = dbutils.widgets.get("adf_input_ds_runid")

print(f"Surveillance ID: {input_survid}")
print(f"Batch ID: {input_batchid}")
print(f"Dataset Run ID: {input_ds_runid}")

# DEV MODE: Simulate all data loading and processing
print("DEV MODE: Simulating data loading...")
print("Loading FX data from database - SIMULATED")
print("Loading SWAP data from database - SIMULATED") 
print("Loading threshold data - SIMULATED")
print("Loading symbol codes - SIMULATED")

# DEV MODE: Simulate threshold processing
print("DEV MODE: Processing thresholds...")
derivativeQuantityThreshold_spotOptions = 1000000
lookbackTimeThreshold_spotOptions = 300
underlyingQuantityThreshold_spotOptions = 500000
minQualifiedTradesThreshold_spotOptions = 5

print("DEV MODE: Threshold values loaded")

# DEV MODE: Simulate cross product analysis
print("DEV MODE: Running cross product analysis...")
print("Analyzing Spot vs Options - SIMULATED")
print("Analyzing Spot vs Forwards - SIMULATED")
print("Analyzing Forwards vs Options - SIMULATED") 
print("Analyzing Spot vs Swaps - SIMULATED")

# DEV MODE: Create dummy alerts following the EXACT Gemini structure
import pandas as pd
import json

# Create sample Cross Product alerts
alerts_data = [
    {
        "SMBCAIDPrefix": "Cross_Product_Manipulation_FX",
        "ProductSymbol": "Multiple Products",
        "SMBCALertTime": "2025-01-15 10:30:00.000",
        "SMBCLocalAlertTime": "2025-01-15 05:30:00.000",
        "SMBCAlertType": "Cross Product Manipulation",
        "IssuerName": "N/A",
        "ShortAlertDescription": "Cross Product SPOT vs Option Alert For TEST_ACCOUNT involving USDJPY",
        "TotalScore": "0",
        "BusinessUnit": "General",
        "SMBCAlertGenerationDate": "2025-01-15 05:30:00.000",
        "ProductName": "Multiple Products",
        "ProductID": "Multiple Products",
        "AccountID": "TEST_ACCOUNT_001",
        "Exchange": "N/A",
        "AssetClass": "FX",
        "LongDescription": "Cross Product SPOT vs Option For TEST_ACCOUNT involving USDJPY",
        "AnalyticsValue1": "Time Difference Between First Underlying and Derivative Timestamps: 45.50 seconds",
        "AnalyticsValue2": "Number of Qualified Underlying Trades: 8.00",
        "AnalyticsValue3": "Size of Derivative Trade: 1500000.00",
        "ThresholdValue1": "Derivative Quantity Threshold | 1000000.00",
        "ThresholdValue2": "Lookback Time Threshold | 300 seconds",
        "ThresholdValue3": "Underlying Quantity Threshold | 500000.00",
        "ThresholdValue4": "Minimum Number of Qualified Trades Threshold | 5.00",
        "AlertRelatedListOrderClordIds": "N/A",
        "AlertRelatedListExecutionClordIds": "EXEC_CP_001,EXEC_CP_002,EXEC_CP_003"
    },
    {
        "SMBCAIDPrefix": "Cross_Product_Manipulation_FX",
        "ProductSymbol": "Multiple Products",
        "SMBCALertTime": "2025-01-15 10:35:00.000", 
        "SMBCLocalAlertTime": "2025-01-15 05:35:00.000",
        "SMBCAlertType": "Cross Product Manipulation",
        "IssuerName": "N/A",
        "ShortAlertDescription": "Cross Product SPOT vs Forward Alert For TEST_ACCOUNT_002 involving EURUSD",
        "TotalScore": "0",
        "BusinessUnit": "General", 
        "SMBCAlertGenerationDate": "2025-01-15 05:35:00.000",
        "ProductName": "Multiple Products",
        "ProductID": "Multiple Products",
        "AccountID": "TEST_ACCOUNT_002",
        "Exchange": "N/A",
        "AssetClass": "FX",
        "LongDescription": "Cross Product SPOT vs Forward Alert For TEST_ACCOUNT_002 involving EURUSD",
        "AnalyticsValue1": "Time Difference Between First Underlying and Derivative Timestamps: 32.75 seconds",
        "AnalyticsValue2": "Number of Qualified Underlying Trades: 12.00",
        "AnalyticsValue3": "Size of Derivative Trade: 2500000.00",
        "ThresholdValue1": "Derivative Quantity Threshold | 1000000.00",
        "ThresholdValue2": "Lookback Time Threshold | 300 seconds",
        "ThresholdValue3": "Underlying Quantity Threshold | 500000.00", 
        "ThresholdValue4": "Minimum Number of Qualified Trades Threshold | 5.00",
        "AlertRelatedListOrderClordIds": "N/A",
        "AlertRelatedListExecutionClordIds": "EXEC_CP_004,EXEC_CP_005,EXEC_CP_006,EXEC_CP_007"
    }
]

# Create DataFrame from alerts data
allAlerts_df = pd.DataFrame(alerts_data)

print(f"DEV MODE: Generated {len(allAlerts_df)} Cross Product alerts")
print("DEV MODE: Alert summary:")
for i, alert in allAlerts_df.iterrows():
    print(f"  Alert {i+1}: {alert['ShortAlertDescription']}")
    print(f"    Account: {alert['AccountID']}")
    print(f"    Analytics: {alert['AnalyticsValue2']}")

# Convert final alerts to JSON for ADF (following Gemini structure)
final_alerts_json_output = allAlerts_df.to_json(orient='records')
print("DEV MODE: Converting alerts to JSON for ADF")
print(f"DEV MODE: Generated JSON with {len(allAlerts_df)} alerts")
print("DEV MODE: Sample JSON output:")
print(final_alerts_json_output[:300] + "..." if len(final_alerts_json_output) > 300 else final_alerts_json_output)

print("DEV MODE: 2B Cross Product Model completed successfully")

# Hand over notes to ADF (exactly like Gemini says)
dbutils.notebook.exit(final_alerts_json_output)
