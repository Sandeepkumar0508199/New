Now let's move to STEP 2 - Create the ADF Pipeline
Go to your ADF (Azure Data Factory) now:

Open your ADF in the browser
Click on "Author" (pencil icon on the left)
Click the "+" sign to add new
Click "Pipeline"
Name it: Common_Write_to_DB_Pipeline_DEV

In the pipeline, drag these activities:

From the Activities panel on the left
Expand "Databricks"
Drag "Notebook" activity to the canvas
Name it: Execute_Common_Write_Notebook_DEV

Configure the Notebook activity:

Click on the notebook activity
Go to "Settings" tab at the bottom
In "Databricks linked service" - select your databricks connection
In "Notebook path" - type: /Shared/Common_Write_to_DB_Notebook_DEV
Click "Parameters" section
Add these parameters:

input_dataframe_json: @pipeline().parameters.alertsJsonInput
input_survid: @pipeline().parameters.surveillanceRunIDInput  
input_ds_runid: @pipeline().parameters.datasetRunIDInput
input_alert_type: @pipeline().parameters.alertTypeInput

Add Pipeline Parameters:

Click anywhere on empty canvas
Go to "Parameters" tab at bottom
Click "New" and add:

Name: alertsJsonInput, Type: String
Name: surveillanceRunIDInput, Type: String
Name: datasetRunIDInput, Type: String
Name: alertTypeInput, Type: String




----------


{
    "name": "Common_Write_to_DB_Pipeline_DEV",
    "properties": {
        "activities": [
            {
                "name": "Execute_Common_Write_Notebook_DEV",
                "type": "DatabricksNotebook",
                "dependsOn": [],
                "policy": {
                    "timeout": "0.12:00:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "typeProperties": {
                    "notebookPath": "/Shared/Common_Write_to_DB_Notebook_DEV",
                    "baseParameters": {
                        "input_dataframe_json": {
                            "value": "@pipeline().parameters.alertsJsonInput",
                            "type": "Expression"
                        },
                        "input_survid": {
                            "value": "@pipeline().parameters.surveillanceRunIDInput",
                            "type": "Expression"
                        },
                        "input_ds_runid": {
                            "value": "@pipeline().parameters.datasetRunIDInput",
                            "type": "Expression"
                        },
                        "input_alert_type": {
                            "value": "@pipeline().parameters.alertTypeInput",
                            "type": "Expression"
                        }
                    }
                },
                "linkedServiceName": {
                    "referenceName": "ls_ccams_databricks",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "subscription_id": {
                            "value": "@pipeline().globalParameters.SubscriptionID",
                            "type": "Expression"
                        },
                        "databricks_url": {
                            "value": "@pipeline().globalParameters.ccamsDatabricksWS",
                            "type": "Expression"
                        },
                        "workspace_resource_id": {
                            "value": "@pipeline().globalParameters.ccamsDatabricksWSResourceID",
                            "type": "Expression"
                        },
                        "cluster_id": {
                            "value": "@pipeline().globalParameters.ClusterID",
                            "type": "Expression"
                        }
                    }
                }
            }
        ],
        "parameters": {
            "alertsJsonInput": {
                "type": "String"
            },
            "surveillanceRunIDInput": {
                "type": "String"
            },
            "datasetRunIDInput": {
                "type": "String"
            },
            "alertTypeInput": {
                "type": "String"
            }
        },
        "folder": {
            "name": "DEV_Testing"
        },
        "annotations": []
    }
}
